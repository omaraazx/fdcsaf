import os
import random
import logging
import traceback
import json
import asyncio
from datetime import datetime
import discord
from discord.ext import commands
import aiohttp
from dotenv import load_dotenv

# –û—Ç–∫–ª—é—á–∞–µ–º –ø—Ä–æ–∫—Å–∏-–ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
for var in ("HTTP_PROXY", "HTTPS_PROXY", "http_proxy", "https_proxy"):
    os.environ.pop(var, None)

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ .env
load_dotenv()

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
DISCORD_TOKEN = os.getenv("DISCORD_TOKEN")
BASE_URL = os.getenv("BASE_URL", "https://api.electronhub.ai/").rstrip("/")
API_KEY = os.getenv("API_KEY")
MODEL_NAME = os.getenv("MODEL_NAME", "claude-3-5-sonnet-20240620")
TEMPERATURE = float(os.getenv("TEMPERATURE", "1.2"))

# –°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç
# –ß—Ç–µ–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–∞ –∏–∑ —Ñ–∞–π–ª–∞
PROMPT = ""
try:
    with open("prompt.txt", "r", encoding="utf-8") as f:
        PROMPT = f.read()
except FileNotFoundError:
    logging.error("–û—à–∏–±–∫–∞: —Ñ–∞–π–ª 'prompt.txt' –Ω–µ –Ω–∞–π–¥–µ–Ω. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –æ–Ω –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ç–æ–π –∂–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏.")
    # –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∑–∞–ø–∞—Å–Ω–æ–π –ø—Ä–æ–º–ø—Ç –∏–ª–∏ –≤—ã–π–¥–∏—Ç–µ, –µ—Å–ª–∏ —Ñ–∞–π–ª –∫—Ä–∏—Ç–∏—á–µ–Ω
    PROMPT = "–û—à–∏–±–∫–∞: —Ñ–∞–π–ª –ø—Ä–æ–º–ø—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é." # –ó–∞–ø–∞—Å–Ω–æ–π –ø—Ä–æ–º–ø—Ç, –µ—Å–ª–∏ —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω
except Exception as e:
    logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ –ø—Ä–æ–º–ø—Ç–∞: {e}")
    PROMPT = "–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Ñ–∞–π–ª –ø—Ä–æ–º–ø—Ç–∞." # –ó–∞–ø–∞—Å–Ω–æ–π –ø—Ä–æ–º–ø—Ç –ø—Ä–∏ –¥—Ä—É–≥–∏—Ö –æ—à–∏–±–∫–∞—Ö —á—Ç–µ–Ω–∏—è

# –†–µ–∑–µ—Ä–≤—ã API
backup_apis = []
for i in range(1, 4):
    url = os.getenv(f"BACKUP_API_URL_{i}")
    key = os.getenv(f"BACKUP_API_KEY_{i}")
    model = os.getenv(f"BACKUP_API_MODEL_{i}", MODEL_NAME)
    if url and key:
        backup_apis.append({"url": url.rstrip("/"), "key": key, "model": model})

logging.basicConfig(level=logging.INFO)

# –ò–Ω—Ç–µ–Ω—Ç—ã
intents = discord.Intents.default()
intents.guilds = True
intents.guild_messages = True
intents.message_content = True
intents.members = True

bot = commands.Bot(command_prefix=commands.when_mentioned_or('!', '-'), intents=intents, help_command=None)

# –ü–∞–º—è—Ç—å
MAX_HISTORY = 60  # STM (–∫—Ä–∞—Ç–∫–æ—Å—Ä–æ—á–Ω–∞—è –ø–∞–º—è—Ç—å)
chat_history = {}

# –î–æ–ª–≥–æ—Å—Ä–æ—á–Ω–∞—è –ø–∞–º—è—Ç—å (LTM)
LTM_FILE = "long_term_memory.json"
STM_FILE = "short_term_memory.json"

def load_memory(file_name, default={}):
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –ø–∞–º—è—Ç—å –∏–∑ —Ñ–∞–π–ª–∞"""
    if os.path.exists(file_name):
        try:
            with open(file_name, 'r', encoding='utf-8') as f:
                return json.load(f)
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–∞–º—è—Ç–∏ ({file_name}): {e}")
    return default

def save_memory(data, file_name):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –ø–∞–º—è—Ç—å –≤ —Ñ–∞–π–ª"""
    try:
        with open(file_name, 'w', encoding='utf-8') as f:
            json.dump(data, f, ensure_ascii=False, indent=2)
        return True
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–∞–º—è—Ç–∏ ({file_name}): {e}")
        return False

def update_history(channel_id: int, role: str, content: str):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç STM (–∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π)"""
    history = chat_history.setdefault(channel_id, [])
    history.append({"role": role, "content": content})
    if len(history) > MAX_HISTORY * 2:
        chat_history[channel_id] = history[-MAX_HISTORY * 2:]
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º STM –Ω–∞ –¥–∏—Å–∫
    save_memory(chat_history, STM_FILE)

def get_user_memory(user_id: str):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç LTM –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≤–∏–¥–µ —Å—Ç—Ä–æ–∫–∏"""
    ltm = load_memory(LTM_FILE)
    user_data = ltm.get(user_id, {})
    
    if not user_data:
        return ""
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É –ø–∞–º—è—Ç–∏
    memory_lines = ["\n\n=== [ –î–û–õ–ì–û–°–†–û–ß–ù–ê–Ø –ü–ê–ú–Ø–¢–¨ ] ==="]
    memory_lines.append(f"–ò–º—è: {user_data.get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π')}")
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Å–≤–æ–¥–∫—É –≤ –ø–∞–º—è—Ç—å –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å
    if 'summary' in user_data:
        memory_lines.append(f"\n–°–≤–æ–¥–∫–∞: {user_data['summary']}")
    
    if 'traits' in user_data:
        memory_lines.append("\n–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏:")
        for trait in user_data['traits']:
            memory_lines.append(f"- {trait['text']} (–æ—Ç {trait['author']}, {datetime.fromisoformat(trait['timestamp']).strftime('%d.%m.%Y')}")
    
    if 'facts' in user_data:
        memory_lines.append("\n–§–∞–∫—Ç—ã:")
        for fact in user_data['facts']:
            memory_lines.append(f"- {fact['text']} (–∑–∞–ø–æ–º–Ω–µ–Ω–æ {datetime.fromisoformat(fact['timestamp']).strftime('%d.%m.%Y')}")
    
    return "\n".join(memory_lines)

async def get_response(user_text: str, channel_id: int, user_id: str) -> str:
    """–ü–æ–ª—É—á–∞–µ—Ç –æ—Ç–≤–µ—Ç –æ—Ç API —Å —É—á–µ—Ç–æ–º –ø–∞–º—è—Ç–∏"""
    history = chat_history.get(channel_id, [])
    apis = [{"url": BASE_URL, "key": API_KEY, "model": MODEL_NAME}] + backup_apis
    
    # –ü–æ–ª—É—á–∞–µ–º LTM –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_ltm = get_user_memory(user_id)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç —Å —É—á–µ—Ç–æ–º –ø–∞–º—è—Ç–∏
    full_prompt = PROMPT + user_ltm
    
    # –°–æ–±–∏—Ä–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã—Ö API
    failed_apis = []
    
    for api in apis:
        try:
            headers = {
                "Content-Type": "application/json",
                "Authorization": f"Bearer {api['key']}"
            }
            payload = {
                "model": api["model"],
                "temperature": TEMPERATURE,
                "messages": [
                    {"role": "system", "content": full_prompt},
                    *history,
                    {"role": "user", "content": user_text}
                ]
            }
            
            async with aiohttp.ClientSession() as session:
                async with session.post(
                    url=api["url"] + "/v1/chat/completions",
                    headers=headers,
                    json=payload,
                    timeout=20
                ) as resp:
                    
                    if resp.status != 200:
                        error_text = await resp.text()
                        logging.warning(f"API {api['url']} –≤–µ—Ä–Ω—É–ª —Å—Ç–∞—Ç—É—Å {resp.status}: {error_text[:200]}")
                        failed_apis.append(api['url'])
                        continue
                        
                    data = await resp.json()
                    return data["choices"][0]["message"]["content"]
                    
        except (aiohttp.ClientError, asyncio.TimeoutError) as e:
            logging.warning(f"–°–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞ –Ω–∞ API {api.get('url', 'unknown')}: {str(e)}")
            failed_apis.append(api.get('url', 'unknown'))
            await asyncio.sleep(1)  # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –ø–æ–ø—ã—Ç–∫–∞–º–∏
        except Exception as e:
            logging.error(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ API: {str(e)}")
            failed_apis.append(api.get('url', 'unknown'))
            await asyncio.sleep(1)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–µ—Ç–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
    error_msg = "üíÄ –í—Å–µ API –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã! –°–µ—Ä–≤–µ—Ä—ã, –∫–æ—Ç–æ—Ä—ã–µ —è –ø—Ä–æ–±–æ–≤–∞–ª:\n"
    error_msg += "\n".join(f"- {api}" for api in set(failed_apis))
    error_msg += "\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏."
    
    raise RuntimeError(error_msg)

@bot.command(name='setprofile', aliases=['—É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å–ø—Ä–æ—Ñ–∏–ª—å'])
async def set_profile(ctx, *, summary: str):
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å–≤–æ–¥–∫—É –ø—Ä–æ—Ñ–∏–ª—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_id = str(ctx.author.id)
    ltm = load_memory(LTM_FILE)
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª–∏–Ω—ã —Å–≤–æ–¥–∫–∏
    if len(summary) > 1000:
        await ctx.send("‚ùå –°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–∞—è —Å–≤–æ–¥–∫–∞! –ú–∞–∫—Å–∏–º—É–º 1000 —Å–∏–º–≤–æ–ª–æ–≤.")
        return
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å
    if user_id not in ltm:
        ltm[user_id] = {
            "name": ctx.author.display_name,
            "traits": [],
            "facts": [],
            "summary": summary
        }
    else:
        ltm[user_id]["summary"] = summary
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
    save_memory(ltm, LTM_FILE)
    await ctx.send(f"‚úÖ –°–≤–æ–¥–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è –¥–ª—è {ctx.author.mention} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞!")

@bot.command(name='profile', aliases=['–ø—Ä–æ—Ñ–∏–ª—å'])
async def user_profile(ctx, member: discord.Member = None):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞–º–∏"""
    target = member or ctx.author
    ltm = load_memory(LTM_FILE)
    user_id = str(target.id)
    
    # –°–æ–∑–¥–∞–µ–º embed
    embed = discord.Embed(
        title=f"üíÄ –î–æ—Å—å–µ –Ω–∞ {target.display_name}",
        color=discord.Color.dark_red(),
        timestamp=datetime.now()
    )
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∞–≤–∞—Ç–∞—Ä
    embed.set_thumbnail(url=target.display_avatar.url)
    
    # –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    embed.add_field(
        name="ü™™ –û—Å–Ω–æ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ",
        value=f"**–ò–º—è:** {target.name}\n"
              f"**ID:** {target.id}\n"
              f"**–ù–∞ —Å–µ—Ä–≤–µ—Ä–µ —Å:** {target.joined_at.strftime('%d.%m.%Y')}",
        inline=False
    )
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Å–≤–æ–¥–∫—É –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å
    if user_id in ltm and 'summary' in ltm[user_id]:
        embed.add_field(
            name="üìù –°–≤–æ–¥–∫–∞",
            value=ltm[user_id]['summary'],
            inline=False
        )
    else:
        embed.add_field(
            name="üìù –°–≤–æ–¥–∫–∞",
            value="*–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ—â–µ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–∏–ª —Å–≤–æ–¥–∫—É*\n"
                  "–ò—Å–ø–æ–ª—å–∑—É–π `!setprofile [—Ç–µ–∫—Å—Ç]` —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å",
            inline=False
        )
    
    # –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –∏–∑ LTM
    traits_section = ""
    if user_id in ltm and ltm[user_id].get('traits'):
        for i, trait in enumerate(ltm[user_id]['traits'], 1):
            traits_section += f"{i}. {trait['text']} (–æ—Ç {trait['author']})\n"
    
    if traits_section:
        embed.add_field(
            name="üìå –Ø—Ä–ª—ã–∫–∏",
            value=f"```\n{traits_section}\n```",
            inline=False
        )
    
    # –§–∞–∫—Ç—ã –∏–∑ LTM
    facts_section = ""
    if user_id in ltm and ltm[user_id].get('facts'):
        for i, fact in enumerate(ltm[user_id]['facts'], 1):
            facts_section += f"{i}. {fact['text']} (–æ—Ç {fact['author']})\n"
    
    if facts_section:
        embed.add_field(
            name="üóÉÔ∏è –ö–æ–º–ø—Ä–æ–º–∞—Ç",
            value=f"```\n{facts_section}\n```",
            inline=False
        )
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    traits_count = len(ltm[user_id]['traits']) if user_id in ltm and 'traits' in ltm[user_id] else 0
    facts_count = len(ltm[user_id]['facts']) if user_id in ltm and 'facts' in ltm[user_id] else 0
    
    embed.add_field(
        name="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞",
        value=f"**–Ø—Ä–ª—ã–∫–æ–≤:** {traits_count}\n"
              f"**–§–∞–∫—Ç–æ–≤:** {facts_count}",
        inline=False
    )
    
    # –§—É—Ç–µ—Ä —Å –ø–æ–¥–ø–∏—Å—å—é –±–æ—Ç–∞
    embed.set_footer(text=f"–ó–∞–ø—Ä–æ—Å–∏–ª: {ctx.author.display_name}", icon_url=ctx.author.display_avatar.url)
    
    await ctx.send(embed=embed)
@bot.command(name='analyze')
@commands.has_permissions(administrator=True)  # –¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤
async def analyze_chat(ctx, limit: int = 100):
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —á–∞—Ç –∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞–µ—Ç —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤"""
    await ctx.send(f"üîç –ù–∞—á–∏–Ω–∞—é –∞–Ω–∞–ª–∏–∑ —á–∞—Ç–∞! –ë—É–¥–µ—Ç –ø—Ä–æ–≤–µ—Ä–µ–Ω–æ {limit} —Å–æ–æ–±—â–µ–Ω–∏–π.")
    
    # –°–æ–±–∏—Ä–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
    messages = []
    async for message in ctx.channel.history(limit=limit):
        if not message.author.bot and message.content:  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –±–æ—Ç–æ–≤ –∏ –ø—É—Å—Ç—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            messages.append(message)
    
    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –∞–≤—Ç–æ—Ä–∞–º
    user_messages = {}
    for message in messages:
        user_id = str(message.author.id)
        if user_id not in user_messages:
            user_messages[user_id] = {
                "user": message.author,
                "messages": []
            }
        user_messages[user_id]["messages"].append(message.content)
    
    # –î–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫—É
    # –≠—Ç–æ—Ç –ø—Ä–æ–º–ø—Ç —Ç–∞–∫–∂–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤—ã–Ω–µ—Å–µ–Ω –≤ –æ—Ç–¥–µ–ª—å–Ω—ã–π —Ñ–∞–π–ª, –µ—Å–ª–∏ –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è
    analysis_prompt = """
–¢—ã ‚Äî –æ–ø—ã—Ç–Ω—ã–π –ø—Å–∏—Ö–æ–ª–æ–≥. –¢–≤–æ—è –∑–∞–¥–∞—á–∞ ‚Äî –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –ø–∏—Å–∞—Ç—å –∫—Ä–∞—Ç–∫–∏–µ, –º–µ—Ç–∫–∏–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

–°–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:
{}

–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞:
    """
    
    for user_id, data in user_messages.items():
        user = data["user"]
        # –ë–µ—Ä–µ–º –Ω–µ –±–æ–ª–µ–µ 20 —Å–æ–æ–±—â–µ–Ω–∏–π, —á—Ç–æ–±—ã –Ω–µ –ø–µ—Ä–µ–≥—Ä—É–∂–∞—Ç—å –ø—Ä–æ–º–ø—Ç
        sample_messages = data["messages"][:20]
        user_text = "\n".join(sample_messages)
        
        # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–π —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ, –æ–±—Ä–µ–∑–∞–µ–º –æ–±—â–∏–π —Ç–µ–∫—Å—Ç
        if len(user_text) > 2000:
            user_text = user_text[:2000]
        
        prompt = analysis_prompt.format(user_text)
        
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ç–¥–µ–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞
            async with ctx.typing():
                trait = await get_analysis_response(prompt)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫—É –≤ LTM
            ltm = load_memory(LTM_FILE)
            if user_id not in ltm:
                ltm[user_id] = {
                    "name": user.display_name,
                    "traits": [],
                    "facts": []
                }
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–æ–π —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –æ—Ç –±–æ—Ç–∞
            existing = False
            for t in ltm[user_id]["traits"]:
                if t["author"] == bot.user.name and t["text"] == trait:
                    existing = True
                    break
            
            if not existing:
                new_trait = {
                    "text": trait,
                    "timestamp": datetime.now().isoformat(),
                    "author": bot.user.name
                }
                ltm[user_id]["traits"].append(new_trait)
                save_memory(ltm, LTM_FILE)
                await ctx.send(f"üîç –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞ –¥–ª—è {user.mention}: *{trait}*")
            else:
                await ctx.send(f"‚ÑπÔ∏è –î–ª—è {user.mention} —É–∂–µ –µ—Å—Ç—å —Ç–∞–∫–∞—è —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞. –ü—Ä–æ–ø—É—Å–∫–∞—é.")
                
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –¥–ª—è {user_id}: {e}")
            await ctx.send(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ {user.mention}! –ü—Ä–æ–ø—É—Å–∫–∞—é.")
    
    await ctx.send("‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω!")

async def get_analysis_response(prompt: str) -> str:
    """–ü–æ–ª—É—á–∞–µ—Ç –æ—Ç–≤–µ—Ç –æ—Ç API –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞"""
    apis = [{"url": BASE_URL, "key": API_KEY, "model": MODEL_NAME}] + backup_apis
    
    for api in apis:
        try:
            headers = {
                "Content-Type": "application/json",
                "Authorization": f"Bearer {api['key']}"
            }
            payload = {
                "model": api["model"],
                "temperature": TEMPERATURE,
                "messages": [
                    {"role": "system", "content": "–¢—ã ‚Äî –æ–ø—ã—Ç–Ω—ã–π –ø—Å–∏—Ö–æ–ª–æ–≥. –¢–≤–æ—è –∑–∞–¥–∞—á–∞ ‚Äî –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –ø–∏—Å–∞—Ç—å –∫—Ä–∞—Ç–∫–∏–µ, –º–µ—Ç–∫–∏–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏."},
                    {"role": "user", "content": prompt}
                ]
            }
            
            async with aiohttp.ClientSession() as session:
                async with session.post(
                    url=api["url"] + "/v1/chat/completions",
                    headers=headers,
                    json=payload,
                    timeout=30
                ) as resp:
                    
                    if resp.status != 200:
                        logging.warning(f"API {api['url']} –≤–µ—Ä–Ω—É–ª —Å—Ç–∞—Ç—É—Å {resp.status}")
                        continue
                        
                    data = await resp.json()
                    return data["choices"][0]["message"]["content"].strip()
                    
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ API {api['url']}: {str(e)}")
            continue
            
    raise RuntimeError("–í—Å–µ API –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã")

@bot.event
async def on_ready():
    """–ó–∞–≥—Ä—É–∂–∞–µ–º STM –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ"""
    global chat_history
    chat_history = load_memory(STM_FILE, {})
    logging.info(f"–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∫–∞–∫ {bot.user.name}")
    logging.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω–∞ STM: {len(chat_history)} –∫–∞–Ω–∞–ª–æ–≤")
    # –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∫–æ–º–∞–Ω–¥–∞—Ö
    command_names = [cmd.name for cmd in bot.commands]
    logging.info(f"–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã: {', '.join(command_names)}")

@bot.event
async def on_message(message: discord.Message):
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥
    if message.content.startswith(('!', '-')):
        await bot.process_commands(message)
        return
        
    if message.author.bot:
        return
        
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ª–æ–≤–∏—è –æ—Ç–≤–µ—Ç–∞
    mentioned = bot.user in message.mentions
    replied = (
        message.reference and 
        isinstance(message.reference.resolved, discord.Message) and 
        message.reference.resolved.author == bot.user
    )
    
    if not (mentioned or replied):
        return
        
    channel_id = str(message.channel.id)
    user_text = message.content.replace(f"<@{bot.user.id}>", "").strip()
    update_history(channel_id, "user", user_text)
        
    try:
        async with message.channel.typing():
            reply = await get_response(user_text, channel_id, str(message.author.id))
            
        # –û–±—Ä–µ–∑–∞–µ–º —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã
        truncated = reply[:2000]
        update_history(channel_id, "assistant", truncated)
        await message.reply(truncated)
        
    except RuntimeError as e:
        # –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è –æ—à–∏–±–∫–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ API
        logging.critical(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)}")
        error_msg = (
            "‚ö†Ô∏è **–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞!**\n\n"
            "–í—Å–µ –º–æ–∏ —Å–µ—Ä–≤–µ—Ä—ã –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã.\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ 5-10 –º–∏–Ω—É—Ç, –ø–æ–∫–∞ —è:\n"
            "- –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ\n"
            "- –ü—Ä–æ–≤–µ—Ä—è—é –Ω–∞—Å—Ç—Ä–æ–π–∫–∏\n"
            "- –ö–æ–Ω—Ç–∞–∫—Ç–∏—Ä—É—é —Å –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞–º–∏\n\n"
            "–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –¥–µ—Ç–∞–ª–∏ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤:\n"
            f"`{str(e)[:500]}`"
        )
        await message.reply(error_msg[:2000])
    except Exception as e:
        logging.error(f"–û–±—â–∞—è –æ—à–∏–±–∫–∞: {str(e)}\n{traceback.format_exc()}")
        fallback = random.choice([
            "‚ö†Ô∏è –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫... –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑",
            "‚ö†Ô∏è –í—Ä–µ–º–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞! –î–∞–≤–∞–π –ø–æ–∑–∂–µ",
            "‚ö†Ô∏è –°–µ—Ä–≤–µ—Ä—ã –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã... –ü–æ–ø—Ä–æ–±—É–π —á–µ—Ä–µ–∑ –ø–∞—Ä—É –º–∏–Ω—É—Ç"
        ])
        update_history(channel_id, "assistant", fallback)
        await message.reply(fallback)

if __name__ == "__main__":
    if not DISCORD_TOKEN or not API_KEY:
        logging.critical("‚ùå DISCORD_TOKEN –∏–ª–∏ API_KEY –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã!")
        exit(1)
        
    bot.run(DISCORD_TOKEN, reconnect=True)